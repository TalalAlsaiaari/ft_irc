
Client* Functions::findClient(const std::string& nick) {
    client_iterator it = nicks.find(nick);
    if (it != nicks.end()) {
        return it->second;
    }
    return NULL; // Client with the given nick not found
}

// Channels

const std::map<std::string, Channel*>&	Functions::getAllChannels() { return channels; }

void Functions::addChannel(const std::string& channelName, Channel* channel) {
    channels[channelName] = channel;
}

Channel* Functions::findChannel(const std::string& channelName) {
    channel_iterator it = channels.find(channelName);
    if (it != channels.end()) {
        return it->second;
    }
    return NULL;
}

void Functions::removeChannel(const std::string& channelName) {
    Channel* channel = findChannel(channelName);
    if (channel) {
        delete channel;
        channels.erase(channelName);
    }
}

void Functions::JOIN(Client* client, const std::string& channelName, const std::string& password = "")
{
	//current_client = person sending message
	// cmd = command like NICK JOIN
	// args = arguments
	// args[0] = channel name
	// args[1] = pass 
    Channel* channel = findChannel(channelName); 

    if (!channel) {
        channel = new Channel(channelName, client, password);
        addChannel(channelName, channel);
        client->joinChannel(channelName, channel);
        std::string joinMessage = "JOIN " + channelName;
        client->write(joinMessage);

        std::string topicMessage = "332 " + client->getNick() + " " + channelName + " :" + channel->getTopic();
        client->write(topicMessage);
    } else {
        if (!channel->isInviteOnly() || channel->isInvited(client)) {
            if (channel->checkPassword(password)) {
                channel->addMember(client);
                client->joinChannel(channelName, channel);
                std::string joinMessage = "JOIN " + channelName;
                client->write(joinMessage);

                std::string topicMessage = "332 " + client->getNick() + " " + channelName + " :" + channel->getTopic();
                client->write(topicMessage);
            } else {
                std::string errorMessage = "475 " + client->getNick() + " " + channelName + " :Cannot join channel (bad key)";
                client->write(errorMessage);
            }
        } else {
            std::string errorMessage = "473 " + client->getNick() + " " + channelName + " :Cannot join channel (+i)";
            client->write(errorMessage);
        }
    }
}

void Functions::PART(Client* client, const std::string& channelName) {
    Channel* channel = findChannel(channelName); 

    if (channel) {
        // Check if the client is the channel owner
        if (channel->getOwner() == client) {
            // The channel owner cannot PART the channel, need to use the KICK command
            client->write("482 " + client->getNick() + " " + channelName + " :You're the channel owner, use KICK to leave the channel.");
            return;
        }

        // Check if the client is an operator or a member of the channel
        if (channel->isOperator(client) || channel->isMember(client)) {
            // Remove the client from the channel
            channel->removeMember(client);
            channel->removeOperator(client); // Remove from operators if client is an operator

            // Send a PART message to the client
            std::string partMessage = "PART " + channelName;
            client->write(partMessage);

            // Send a PART message to other channel members
            std::string broadcastMessage = ":" + client->getNick() + "!" + client->getUsername() + "@" + client->getHostname() +
                                           " PART " + channelName;
            channel->broadcast(broadcastMessage, client);

            // Remove the channel if it becomes empty
            if (channel->isEmpty()) {
                removeChannel(channelName);
                delete channel;
            }
        } else {
            // Send an error message if the client is not a member or operator
            std::string errorMessage = "442 " + client->getNick() + " " + channelName + " :You're not on that channel";
            client->write(errorMessage);
        }
    } else {
        // Send an error message if the channel doesn't exist
        std::string errorMessage = "403 " + client->getNick() + " " + channelName + " :No such channel";
        client->write(errorMessage);
    }
}

void Functions::INVITE(Client* client, const std::string& nick, const std::string& channelName) {
    Channel* channel = findChannel(channelName);

    if (channel) {
        // Check if the client is the channel owner or operator
        if (channel->isOperator(client) || channel->getOwner() == client) {
            // Find the target client by nickname
            Client* targetClient = findClient(nick);

            if (targetClient) {
                // Check if the target client is already a member or invited to the channel
                if (channel->isMember(targetClient) || channel->isInvited(targetClient)) {
                    client->write("443 " + client->getNick() + " " + nick + " " + channelName + " :is already on channel");
                } else {
                    // Add the target client to the invited list of the channel
                    channel->addInvited(targetClient);
                    targetClient->write(":" + client->getNick() + " INVITE " + targetClient->getNick() + " :" + channelName);
                }
            } else {
                client->write("401 " + client->getNick() + " " + nick + " :No such nick");
            }
        } else {
            client->write("482 " + client->getNick() + " " + channelName + " :You're not channel operator");
        }
    } else {
        client->write("403 " + client->getNick() + " " + channelName + " :No such channel");
    }
}

void Functions::KICK(Client* client, const std::string& channelName, const std::string& targetNick, const std::string& reason) {
    Channel* channel = findChannel(channelName);

    if (channel) {
        // Check if the client has kick privileges (owner or operator)
        if (channel->isOperator(client) || channel->getOwner() == client) {
            Client* target = findClient(targetNick);

            if (target) {
                // Check if the target is the channel owner
                if (target == channel->getOwner()) {
                    client->write("482 " + client->getNick() + " " + channelName + " :You cannot kick the channel owner.");
                    return;
                }

                // Perform the kick
                channel->kick(client, target, reason);
            } else {
                // Send an error message if the target client doesn't exist
                std::string errorMessage = "401 " + client->getNick() + " " + targetNick + " :No such nick";
                client->write(errorMessage);
            }
        } else {
            // Send an error message if the client doesn't have kick privileges
            std::string errorMessage = "482 " + client->getNick() + " " + channelName + " :You're not a channel operator";
            client->write(errorMessage);
        }
    } else {
        // Send an error message if the channel doesn't exist
        std::string errorMessage = "403 " + client->getNick() + " " + channelName + " :No such channel";
        client->write(errorMessage);
    }
}

void Functions::TOPIC(Client* client, const std::string& channelName, const std::string& newTopic) {
    Channel* channel = findChannel(channelName);

    if (channel) {
        // Check if the client is a member or operator of the channel
        if (channel->isOperator(client) || channel->isMember(client)) {
            // Set the new topic for the channel
            channel->setTopic(newTopic);

            // Send the new topic to the channel
            std::string topicMessage = "TOPIC " + channelName + " :" + newTopic;
            channel->broadcast(topicMessage);

            // Send a response to the client
            std::string responseMessage = "332 " + client->getNick() + " " + channelName + " :" + newTopic;
            client->write(responseMessage);
        } else {
            // Send an error message if the client is not a member or operator
            std::string errorMessage = "442 " + client->getNick() + " " + channelName + " :You're not on that channel";
            client->write(errorMessage);
        }
    } else {
        // Send an error message if the channel doesn't exist
        std::string errorMessage = "403 " + client->getNick() + " " + channelName + " :No such channel";
        client->write(errorMessage);
    }
}

void Functions::MODE(Client* client, const std::string& channelName, const std::string& modes, const std::string& parameters) {
    Channel* channel = findChannel(channelName);

    if (!channel) {
        // Send an error message if the channel doesn't exist
        std::string errorMessage = "403 " + client->getNick() + " " + channelName + " :No such channel";
        client->write(errorMessage);
        return;
    }

    // Check if the client has permission to change modes
    if (!channel->isOperator(client) && channel->getOwner() != client) {
        // Send an error message if the client is not an operator or the owner
        std::string errorMessage = "482 " + client->getNick() + " " + channelName + " :You're not a channel operator or owner";
        client->write(errorMessage);
        return;
    }

    std::string modeChanges;
    std::string parametersToSend;
    
    for (size_t i = 0; i < modes.length(); ++i) {
        char mode = modes[i];
        char sign = '+';

        if (mode == '+' || mode == '-') {
            sign = mode;
            continue;
        }

        // Check for supported channel modes
        if (mode == 'i' || mode == 't' || mode == 'k' || mode == 'o' || mode == 'l') {
            if (sign == '-') {
                // Handle removing modes here
                if (mode == 'o') {
                    // Handle removing operator mode
                    std::string targetNickname = getNextParameter(parameters);
					Client* targetClient = findClient(targetNickname);
					if (!targetClient) {
						// Send an error message if the target client doesn't exist
						std::string errorMessage = "401 " + client->getNick() + " " + targetNickname + " :No such nick/channel";
						client->write(errorMessage);
						return;
					}
					// Check if the target is an operator and remove the operator mode
					if (channel->isOperator(targetClient)) {
						channel->removeOperator(targetClient);
						std::string modeMessage = "MODE " + channelName + " -o " + targetNickname;
						channel->broadcast(modeMessage);
					} else {
						// Send an error message if the target is not an operator
						std::string errorMessage = "482 " + client->getNick() + " " + targetNickname + " :You're not a channel operator";
						client->write(errorMessage);
						return;
					}
				} else if (mode == 'i') {
					// Handle removing invite-only mode
					if (channel->isOwner(client)) {
						if (channel->isInviteOnly()) {
							channel->setInviteOnly(false);
							std::string modeMessage = "MODE " + channelName + " -i";
							channel->broadcast(modeMessage);
						}
					} else {
						// Send an error message if the client is not the channel owner
						std::string errorMessage = "482 " + client->getNick() + " " + channelName + " :You're not the channel owner";
						client->write(errorMessage);
						return;
					}
                } else if (mode == 'l') {
                    // Handle removing user limit mode
					if (channel->isOwner(client)) {
						if (channel->hasUserLimit()) {
							channel->removeUserLimit();
							std::string modeMessage = "MODE " + channelName + " -l";
							channel->broadcast(modeMessage);
						}
					} else {
						// Send an error message if the client is not the channel owner
						std::string errorMessage = "482 " + client->getNick() + " " + channelName + " :You're not the channel owner";
						client->write(errorMessage);
						return;
					}
				} else if (mode == 'k') {
					// Handle removing channel key mode
					if (channel->isOwner(client)) {
						if (channel->hasChannelKey()) {
							channel->removeChannelKey();
							std::string modeMessage = "MODE " + channelName + " -k";
							channel->broadcast(modeMessage);
						}
					} else {
						// Send an error message if the client is not the channel owner
						std::string errorMessage = "482 " + client->getNick() + " " + channelName + " :You're not the channel owner";
						client->write(errorMessage);
						return;
					}
				} else if (mode == 't') {
					// Handle removing topic restrictions mode
					if (channel->isOwner(client)) {
						if (channel->hasTopicRestrictions()) {
							channel->removeTopicRestrictions();
							std::string modeMessage = "MODE " + channelName + " -t";
							channel->broadcast(modeMessage);
						}
					} else {
						// Send an error message if the client is not the channel owner
						std::string errorMessage = "482 " + client->getNick() + " " + channelName + " :You're not the channel owner";
						client->write(errorMessage);
						return;
					}
                } else {
                    // Unsupported mode for removal, send an error message
                    std::string errorMessage = "472 " + client->getNick() + " " + channelName + " " + mode + " :Unknown mode";
                    client->write(errorMessage);
                    return;
                }
            } else {
                // Handle adding modes here
                if (mode == 'i') {
                    // Handle invite-only mode
                    if (channel->isOwner(client)) {
					if (!channel->isInviteOnly()) {
						channel->setInviteOnly(true);
						std::string modeMessage = "MODE " + channelName + " +i";
						channel->broadcast(modeMessage);
					}
				} else {
					// Send an error message if the client is not the channel owner
					std::string errorMessage = "482 " + client->getNick() + " " + channelName + " :You're not the channel owner";
					client->write(errorMessage);
					return;
				}
                } else if (mode == 't') {
					// Handle topic restrictions mode
					if (channel->isOwner(client)) {
						// Apply topic restrictions to the channel
						// ...
						std::string modeMessage = "MODE " + channelName + " +t";
						channel->broadcast(modeMessage);
					} else {
						// Send an error message if the client is not the channel owner
						std::string errorMessage = "482 " + client->getNick() + " " + channelName + " :You're not the channel owner";
						client->write(errorMessage);
						return;
					}
                } else if (mode == 'k') {
					// Handle channel key mode
					if (channel->isOwner(client)) {
						// Parse the channel key argument and set it for the channel
						// ...
						std::string modeMessage = "MODE " + channelName + " +k " + channelKeyArg;
						channel->broadcast(modeMessage);
					} else {
						// Send an error message if the client is not the channel owner
						std::string errorMessage = "482 " + client->getNick() + " " + channelName + " :You're not the channel owner";
						client->write(errorMessage);
						return;
					}
                } else if (mode == 'o') {
                    // Handle operator mode
                    std::string targetNickname = getNextParameter(parameters);
					Client* targetClient = findClient(targetNickname);
					if (!targetClient) {
						// Send an error message if the target client doesn't exist
						std::string errorMessage = "401 " + client->getNick() + " " + targetNickname + " :No such nick/channel";
						client->write(errorMessage);
						return;
					}
					// Check if the target is not already an operator and add the operator mode
					if (!channel->isOperator(targetClient)) {
						channel->addOperator(targetClient);
						std::string modeMessage = "MODE " + channelName + " +o " + targetNickname;
						channel->broadcast(modeMessage);
					}
                } else if (mode == 'l') {
					// Handle user limit mode
					if (channel->isOwner(client)) {
						// Parse the user limit argument and set it for the channel
						// ...
						std::string modeMessage = "MODE " + channelName + " +l " + userLimitArg;
						channel->broadcast(modeMessage);
					} else {
						// Send an error message if the client is not the channel owner
						std::string errorMessage = "482 " + client->getNick() + " " + channelName + " :You're not the channel owner";
						client->write(errorMessage);
						return;
					}
                } else {
                    // Unsupported mode for addition, send an error message
                    std::string errorMessage = "472 " + client->getNick() + " " + channelName + " " + mode + " :Unknown mode";
                    client->write(errorMessage);
                    return;
                }
            }
        } else {
            // Unsupported mode, send an error message
            std::string errorMessage = "472 " + client->getNick() + " " + channelName + " " + mode + " :Unknown mode";
            client->write(errorMessage);
            return;
        }
    }

    // Send mode changes to the channel
    std::string modeMessage = "MODE " + channelName + " " + modeChanges + " " + parametersToSend;
    channel->broadcast(modeMessage);

    // Optionally, send a reply to the client confirming the mode changes
    std::string replyMessage = "MODE " + channelName + " " + modeChanges + " " + parametersToSend;
    client->write(replyMessage);
}
